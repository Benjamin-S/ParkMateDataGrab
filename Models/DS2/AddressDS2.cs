// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DataGrab.Models.DS2;
//
//    var AddressDS2 = AddressDS2.FromJson(jsonString);

namespace DataGrab.Models.DS2
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AddressDS2
    {
        [JsonProperty("block_id")]
        public string BlockId { get; set; }

        [JsonProperty("bps_base_id")]
        public string BpsBaseId { get; set; }

        [JsonProperty("census_year")]
        public string CensusYear { get; set; }

        [JsonProperty("clue_small_area")]
        public string ClueSmallArea { get; set; }

        [JsonProperty("dwelling_number")]
        public string DwellingNumber { get; set; }

        [JsonProperty("dwelling_type")]
        [JsonConverter(typeof(DwellingTypeConverter))]
        public DwellingType DwellingType { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("pbs_property_id")]
        public string PbsPropertyId { get; set; }

        [JsonProperty("street_name")]
        public string StreetName { get; set; }

        [JsonProperty("x_coordinate")]
        public string XCoordinate { get; set; }

        [JsonProperty("y_coordinate")]
        public string YCoordinate { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }
    }

    public enum DwellingType { HouseTownhouse, ResidentialApartments, StudentApartments };

    public partial class AddressDS2
    {
        public static List<AddressDS2> FromJson(string json) => JsonConvert.DeserializeObject<List<AddressDS2>>(json, DataGrab.Models.DS2.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<AddressDS2> self) => JsonConvert.SerializeObject(self, DataGrab.Models.DS2.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DwellingTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DwellingTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DwellingType) || t == typeof(DwellingType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "House/Townhouse":
                    return DwellingType.HouseTownhouse;
                case "Residential Apartments":
                    return DwellingType.ResidentialApartments;
                case "Student Apartments":
                    return DwellingType.StudentApartments;
            }
            throw new Exception("Cannot unmarshal type DwellingType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DwellingType)untypedValue;
            switch (value)
            {
                case DwellingType.HouseTownhouse:
                    serializer.Serialize(writer, "House/Townhouse");
                    return;
                case DwellingType.ResidentialApartments:
                    serializer.Serialize(writer, "Residential Apartments");
                    return;
                case DwellingType.StudentApartments:
                    serializer.Serialize(writer, "Student Apartments");
                    return;
            }
            throw new Exception("Cannot marshal type DwellingType");
        }

        public static readonly DwellingTypeConverter Singleton = new DwellingTypeConverter();
    }
}
